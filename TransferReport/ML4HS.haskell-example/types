{
  "asts": [
    {
      "name": "fact",
      "package": "haskell-example",
      "module": "Eval",
      "ast": "(\"Lam\" ((\"Var\" (\"name\" \"a\"))) (\"Lam\" ((\"Var\" (\"name\" \"$dEq\"))) (\"Lam\" ((\"Var\" (\"name\" \"$dNum\"))) (\"Let\" (\"Rec\" (\"(:)\" (\"(,)\" ((\"Var\" (\"name\" \"fact\"))) (\"Lam\" ((\"Var\" (\"name\" \"n\"))) (\"Case\" (\"App\" (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"==\") (\"mod\" \"GHC.Classes\") (\"pkg\" \"ghc-prim-0.4.0.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dEq\"))))) (\"Var\" ((\"Var\" (\"name\" \"n\"))))) (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"fromInteger\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Lit\" (\"LitInteger\" (\"0\") (\"TyConApp\" ((\"TyCon\" ((\"name\" \"Integer\") (\"mod\" \"GHC.Integer.Type\") (\"pkg\" \"integer-gmp-1.0.0.0\")))) (\"[]\")))))) ((\"Var\" (\"name\" \"wild\"))) (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))) (\"(:)\" (\"(,,)\" (\"DataAlt\" ((\"DataCon\" ((\"name\" \"False\") (\"mod\" \"GHC.Types\") (\"pkg\" \"ghc-prim-0.4.0.0\"))))) (\"[]\") (\"App\" (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"*\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Var\" ((\"Var\" (\"name\" \"n\"))))) (\"App\" (\"Var\" ((\"Var\" (\"name\" \"fact\")))) (\"App\" (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"-\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Var\" ((\"Var\" (\"name\" \"n\"))))) (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"fromInteger\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Lit\" (\"LitInteger\" (\"1\") (\"TyConApp\" ((\"TyCon\" ((\"name\" \"Integer\") (\"mod\" \"GHC.Integer.Type\") (\"pkg\" \"integer-gmp-1.0.0.0\")))) (\"[]\"))))))))) (\"(:)\" (\"(,,)\" (\"DataAlt\" ((\"DataCon\" ((\"name\" \"True\") (\"mod\" \"GHC.Types\") (\"pkg\" \"ghc-prim-0.4.0.0\"))))) (\"[]\") (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"fromInteger\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Lit\" (\"LitInteger\" (\"1\") (\"TyConApp\" ((\"TyCon\" ((\"name\" \"Integer\") (\"mod\" \"GHC.Integer.Type\") (\"pkg\" \"integer-gmp-1.0.0.0\")))) (\"[]\")))))) (\"[]\")))))) (\"[]\"))) (\"Var\" ((\"Var\" (\"name\" \"fact\"))))))))"
    },
    {
      "name": "fib",
      "package": "haskell-example",
      "module": "Eval",
      "ast": "(\"Lam\" ((\"Var\" (\"name\" \"a\"))) (\"Lam\" ((\"Var\" (\"name\" \"a\"))) (\"Lam\" ((\"Var\" (\"name\" \"$dEq\"))) (\"Lam\" ((\"Var\" (\"name\" \"$dNum\"))) (\"Lam\" ((\"Var\" (\"name\" \"$dNum\"))) (\"Let\" (\"Rec\" (\"(:)\" (\"(,)\" ((\"Var\" (\"name\" \"fib\"))) (\"Lam\" ((\"Var\" (\"name\" \"n\"))) (\"Case\" (\"App\" (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"==\") (\"mod\" \"GHC.Classes\") (\"pkg\" \"ghc-prim-0.4.0.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dEq\"))))) (\"Var\" ((\"Var\" (\"name\" \"n\"))))) (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"fromInteger\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Lit\" (\"LitInteger\" (\"0\") (\"TyConApp\" ((\"TyCon\" ((\"name\" \"Integer\") (\"mod\" \"GHC.Integer.Type\") (\"pkg\" \"integer-gmp-1.0.0.0\")))) (\"[]\")))))) ((\"Var\" (\"name\" \"wild\"))) (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))) (\"(:)\" (\"(,,)\" (\"DataAlt\" ((\"DataCon\" ((\"name\" \"False\") (\"mod\" \"GHC.Types\") (\"pkg\" \"ghc-prim-0.4.0.0\"))))) (\"[]\") (\"Case\" (\"App\" (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"==\") (\"mod\" \"GHC.Classes\") (\"pkg\" \"ghc-prim-0.4.0.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dEq\"))))) (\"Var\" ((\"Var\" (\"name\" \"n\"))))) (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"fromInteger\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Lit\" (\"LitInteger\" (\"1\") (\"TyConApp\" ((\"TyCon\" ((\"name\" \"Integer\") (\"mod\" \"GHC.Integer.Type\") (\"pkg\" \"integer-gmp-1.0.0.0\")))) (\"[]\")))))) ((\"Var\" (\"name\" \"wild\"))) (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))) (\"(:)\" (\"(,,)\" (\"DataAlt\" ((\"DataCon\" ((\"name\" \"False\") (\"mod\" \"GHC.Types\") (\"pkg\" \"ghc-prim-0.4.0.0\"))))) (\"[]\") (\"App\" (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"+\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"App\" (\"Var\" ((\"Var\" (\"name\" \"fib\")))) (\"App\" (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"-\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Var\" ((\"Var\" (\"name\" \"n\"))))) (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"fromInteger\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Lit\" (\"LitInteger\" (\"1\") (\"TyConApp\" ((\"TyCon\" ((\"name\" \"Integer\") (\"mod\" \"GHC.Integer.Type\") (\"pkg\" \"integer-gmp-1.0.0.0\")))) (\"[]\")))))))) (\"App\" (\"Var\" ((\"Var\" (\"name\" \"fib\")))) (\"App\" (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"-\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Var\" ((\"Var\" (\"name\" \"n\"))))) (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"fromInteger\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Lit\" (\"LitInteger\" (\"2\") (\"TyConApp\" ((\"TyCon\" ((\"name\" \"Integer\") (\"mod\" \"GHC.Integer.Type\") (\"pkg\" \"integer-gmp-1.0.0.0\")))) (\"[]\"))))))))) (\"(:)\" (\"(,,)\" (\"DataAlt\" ((\"DataCon\" ((\"name\" \"True\") (\"mod\" \"GHC.Types\") (\"pkg\" \"ghc-prim-0.4.0.0\"))))) (\"[]\") (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"fromInteger\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Lit\" (\"LitInteger\" (\"1\") (\"TyConApp\" ((\"TyCon\" ((\"name\" \"Integer\") (\"mod\" \"GHC.Integer.Type\") (\"pkg\" \"integer-gmp-1.0.0.0\")))) (\"[]\")))))) (\"[]\"))))) (\"(:)\" (\"(,,)\" (\"DataAlt\" ((\"DataCon\" ((\"name\" \"True\") (\"mod\" \"GHC.Types\") (\"pkg\" \"ghc-prim-0.4.0.0\"))))) (\"[]\") (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"fromInteger\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Lit\" (\"LitInteger\" (\"0\") (\"TyConApp\" ((\"TyCon\" ((\"name\" \"Integer\") (\"mod\" \"GHC.Integer.Type\") (\"pkg\" \"integer-gmp-1.0.0.0\")))) (\"[]\")))))) (\"[]\")))))) (\"[]\"))) (\"Var\" ((\"Var\" (\"name\" \"fib\"))))))))))"
    },
    {
      "name": "helperFact",
      "package": "haskell-example",
      "module": "Eval",
      "ast": "(\"Lam\" ((\"Var\" (\"name\" \"a\"))) (\"Lam\" ((\"Var\" (\"name\" \"$dEq\"))) (\"Lam\" ((\"Var\" (\"name\" \"$dNum\"))) (\"Let\" (\"Rec\" (\"(:)\" (\"(,)\" ((\"Var\" (\"name\" \"helperFact\"))) (\"Lam\" ((\"Var\" (\"name\" \"n\"))) (\"Lam\" ((\"Var\" (\"name\" \"a\"))) (\"Case\" (\"App\" (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"==\") (\"mod\" \"GHC.Classes\") (\"pkg\" \"ghc-prim-0.4.0.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dEq\"))))) (\"Var\" ((\"Var\" (\"name\" \"n\"))))) (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"fromInteger\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Lit\" (\"LitInteger\" (\"0\") (\"TyConApp\" ((\"TyCon\" ((\"name\" \"Integer\") (\"mod\" \"GHC.Integer.Type\") (\"pkg\" \"integer-gmp-1.0.0.0\")))) (\"[]\")))))) ((\"Var\" (\"name\" \"wild\"))) (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))) (\"(:)\" (\"(,,)\" (\"DataAlt\" ((\"DataCon\" ((\"name\" \"False\") (\"mod\" \"GHC.Types\") (\"pkg\" \"ghc-prim-0.4.0.0\"))))) (\"[]\") (\"App\" (\"App\" (\"Var\" ((\"Var\" (\"name\" \"helperFact\")))) (\"App\" (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"-\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Var\" ((\"Var\" (\"name\" \"n\"))))) (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"fromInteger\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Lit\" (\"LitInteger\" (\"1\") (\"TyConApp\" ((\"TyCon\" ((\"name\" \"Integer\") (\"mod\" \"GHC.Integer.Type\") (\"pkg\" \"integer-gmp-1.0.0.0\")))) (\"[]\"))))))) (\"App\" (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"*\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Var\" ((\"Var\" (\"name\" \"a\"))))) (\"Var\" ((\"Var\" (\"name\" \"n\"))))))) (\"(:)\" (\"(,,)\" (\"DataAlt\" ((\"DataCon\" ((\"name\" \"True\") (\"mod\" \"GHC.Types\") (\"pkg\" \"ghc-prim-0.4.0.0\"))))) (\"[]\") (\"Var\" ((\"Var\" (\"name\" \"a\"))))) (\"[]\"))))))) (\"[]\"))) (\"Var\" ((\"Var\" (\"name\" \"helperFact\"))))))))"
    },
    {
      "name": "factTail",
      "package": "haskell-example",
      "module": "Eval",
      "ast": "(\"Lam\" ((\"Var\" (\"name\" \"a\"))) (\"Lam\" ((\"Var\" (\"name\" \"$dEq\"))) (\"Lam\" ((\"Var\" (\"name\" \"$dNum\"))) (\"Lam\" ((\"Var\" (\"name\" \"n\"))) (\"App\" (\"App\" (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"helperFact\") (\"mod\" \"Eval\") (\"pkg\" \"haskell-example\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dEq\"))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Var\" ((\"Var\" (\"name\" \"n\"))))) (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"fromInteger\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Lit\" (\"LitInteger\" (\"1\") (\"TyConApp\" ((\"TyCon\" ((\"name\" \"Integer\") (\"mod\" \"GHC.Integer.Type\") (\"pkg\" \"integer-gmp-1.0.0.0\")))) (\"[]\"))))))))))"
    },
    {
      "name": "helperFib",
      "package": "haskell-example",
      "module": "Eval",
      "ast": "(\"Lam\" ((\"Var\" (\"name\" \"a\"))) (\"Lam\" ((\"Var\" (\"name\" \"a\"))) (\"Lam\" ((\"Var\" (\"name\" \"$dEq\"))) (\"Lam\" ((\"Var\" (\"name\" \"$dNum\"))) (\"Lam\" ((\"Var\" (\"name\" \"$dNum\"))) (\"Let\" (\"Rec\" (\"(:)\" (\"(,)\" ((\"Var\" (\"name\" \"helperFib\"))) (\"Lam\" ((\"Var\" (\"name\" \"n\"))) (\"Lam\" ((\"Var\" (\"name\" \"j\"))) (\"Lam\" ((\"Var\" (\"name\" \"k\"))) (\"Case\" (\"App\" (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"==\") (\"mod\" \"GHC.Classes\") (\"pkg\" \"ghc-prim-0.4.0.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dEq\"))))) (\"Var\" ((\"Var\" (\"name\" \"n\"))))) (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"fromInteger\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Lit\" (\"LitInteger\" (\"0\") (\"TyConApp\" ((\"TyCon\" ((\"name\" \"Integer\") (\"mod\" \"GHC.Integer.Type\") (\"pkg\" \"integer-gmp-1.0.0.0\")))) (\"[]\")))))) ((\"Var\" (\"name\" \"wild\"))) (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))) (\"(:)\" (\"(,,)\" (\"DataAlt\" ((\"DataCon\" ((\"name\" \"False\") (\"mod\" \"GHC.Types\") (\"pkg\" \"ghc-prim-0.4.0.0\"))))) (\"[]\") (\"Case\" (\"App\" (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"==\") (\"mod\" \"GHC.Classes\") (\"pkg\" \"ghc-prim-0.4.0.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dEq\"))))) (\"Var\" ((\"Var\" (\"name\" \"n\"))))) (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"fromInteger\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Lit\" (\"LitInteger\" (\"1\") (\"TyConApp\" ((\"TyCon\" ((\"name\" \"Integer\") (\"mod\" \"GHC.Integer.Type\") (\"pkg\" \"integer-gmp-1.0.0.0\")))) (\"[]\")))))) ((\"Var\" (\"name\" \"wild\"))) (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))) (\"(:)\" (\"(,,)\" (\"DataAlt\" ((\"DataCon\" ((\"name\" \"False\") (\"mod\" \"GHC.Types\") (\"pkg\" \"ghc-prim-0.4.0.0\"))))) (\"[]\") (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" (\"name\" \"helperFib\")))) (\"App\" (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"-\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Var\" ((\"Var\" (\"name\" \"n\"))))) (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"fromInteger\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Lit\" (\"LitInteger\" (\"1\") (\"TyConApp\" ((\"TyCon\" ((\"name\" \"Integer\") (\"mod\" \"GHC.Integer.Type\") (\"pkg\" \"integer-gmp-1.0.0.0\")))) (\"[]\"))))))) (\"Var\" ((\"Var\" (\"name\" \"k\"))))) (\"App\" (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"+\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Var\" ((\"Var\" (\"name\" \"j\"))))) (\"Var\" ((\"Var\" (\"name\" \"k\"))))))) (\"(:)\" (\"(,,)\" (\"DataAlt\" ((\"DataCon\" ((\"name\" \"True\") (\"mod\" \"GHC.Types\") (\"pkg\" \"ghc-prim-0.4.0.0\"))))) (\"[]\") (\"Var\" ((\"Var\" (\"name\" \"k\"))))) (\"[]\"))))) (\"(:)\" (\"(,,)\" (\"DataAlt\" ((\"DataCon\" ((\"name\" \"True\") (\"mod\" \"GHC.Types\") (\"pkg\" \"ghc-prim-0.4.0.0\"))))) (\"[]\") (\"Var\" ((\"Var\" (\"name\" \"j\"))))) (\"[]\")))))))) (\"[]\"))) (\"Var\" ((\"Var\" (\"name\" \"helperFib\"))))))))))"
    },
    {
      "name": "fibTail",
      "package": "haskell-example",
      "module": "Eval",
      "ast": "(\"Lam\" ((\"Var\" (\"name\" \"a\"))) (\"Lam\" ((\"Var\" (\"name\" \"a\"))) (\"Lam\" ((\"Var\" (\"name\" \"$dEq\"))) (\"Lam\" ((\"Var\" (\"name\" \"$dNum\"))) (\"Lam\" ((\"Var\" (\"name\" \"$dNum\"))) (\"Lam\" ((\"Var\" (\"name\" \"n\"))) (\"App\" (\"App\" (\"App\" (\"App\" (\"App\" (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"helperFib\") (\"mod\" \"Eval\") (\"pkg\" \"haskell-example\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dEq\"))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Var\" ((\"Var\" (\"name\" \"n\"))))) (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"fromInteger\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Lit\" (\"LitInteger\" (\"0\") (\"TyConApp\" ((\"TyCon\" ((\"name\" \"Integer\") (\"mod\" \"GHC.Integer.Type\") (\"pkg\" \"integer-gmp-1.0.0.0\")))) (\"[]\")))))) (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"fromInteger\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Lit\" (\"LitInteger\" (\"1\") (\"TyConApp\" ((\"TyCon\" ((\"name\" \"Integer\") (\"mod\" \"GHC.Integer.Type\") (\"pkg\" \"integer-gmp-1.0.0.0\")))) (\"[]\"))))))))))))"
    },
    {
      "name": "helperPower",
      "package": "haskell-example",
      "module": "Eval",
      "ast": "(\"Lam\" ((\"Var\" (\"name\" \"a\"))) (\"Lam\" ((\"Var\" (\"name\" \"a\"))) (\"Lam\" ((\"Var\" (\"name\" \"$dEq\"))) (\"Lam\" ((\"Var\" (\"name\" \"$dNum\"))) (\"Lam\" ((\"Var\" (\"name\" \"$dNum\"))) (\"Let\" (\"Rec\" (\"(:)\" (\"(,)\" ((\"Var\" (\"name\" \"helperPower\"))) (\"Lam\" ((\"Var\" (\"name\" \"n\"))) (\"Lam\" ((\"Var\" (\"name\" \"a\"))) (\"Case\" (\"App\" (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"==\") (\"mod\" \"GHC.Classes\") (\"pkg\" \"ghc-prim-0.4.0.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dEq\"))))) (\"Var\" ((\"Var\" (\"name\" \"n\"))))) (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"fromInteger\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Lit\" (\"LitInteger\" (\"0\") (\"TyConApp\" ((\"TyCon\" ((\"name\" \"Integer\") (\"mod\" \"GHC.Integer.Type\") (\"pkg\" \"integer-gmp-1.0.0.0\")))) (\"[]\")))))) ((\"Var\" (\"name\" \"wild\"))) (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))) (\"(:)\" (\"(,,)\" (\"DataAlt\" ((\"DataCon\" ((\"name\" \"False\") (\"mod\" \"GHC.Types\") (\"pkg\" \"ghc-prim-0.4.0.0\"))))) (\"[]\") (\"App\" (\"App\" (\"Var\" ((\"Var\" (\"name\" \"helperPower\")))) (\"App\" (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"-\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Var\" ((\"Var\" (\"name\" \"n\"))))) (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"fromInteger\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Lit\" (\"LitInteger\" (\"1\") (\"TyConApp\" ((\"TyCon\" ((\"name\" \"Integer\") (\"mod\" \"GHC.Integer.Type\") (\"pkg\" \"integer-gmp-1.0.0.0\")))) (\"[]\"))))))) (\"App\" (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"+\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Var\" ((\"Var\" (\"name\" \"a\"))))) (\"Var\" ((\"Var\" (\"name\" \"a\"))))))) (\"(:)\" (\"(,,)\" (\"DataAlt\" ((\"DataCon\" ((\"name\" \"True\") (\"mod\" \"GHC.Types\") (\"pkg\" \"ghc-prim-0.4.0.0\"))))) (\"[]\") (\"Var\" ((\"Var\" (\"name\" \"a\"))))) (\"[]\"))))))) (\"[]\"))) (\"Var\" ((\"Var\" (\"name\" \"helperPower\"))))))))))"
    },
    {
      "name": "power",
      "package": "haskell-example",
      "module": "Eval",
      "ast": "(\"Lam\" ((\"Var\" (\"name\" \"a\"))) (\"Lam\" ((\"Var\" (\"name\" \"a\"))) (\"Lam\" ((\"Var\" (\"name\" \"$dEq\"))) (\"Lam\" ((\"Var\" (\"name\" \"$dNum\"))) (\"Lam\" ((\"Var\" (\"name\" \"$dNum\"))) (\"Let\" (\"Rec\" (\"(:)\" (\"(,)\" ((\"Var\" (\"name\" \"power\"))) (\"Lam\" ((\"Var\" (\"name\" \"n\"))) (\"Case\" (\"App\" (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"==\") (\"mod\" \"GHC.Classes\") (\"pkg\" \"ghc-prim-0.4.0.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dEq\"))))) (\"Var\" ((\"Var\" (\"name\" \"n\"))))) (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"fromInteger\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Lit\" (\"LitInteger\" (\"0\") (\"TyConApp\" ((\"TyCon\" ((\"name\" \"Integer\") (\"mod\" \"GHC.Integer.Type\") (\"pkg\" \"integer-gmp-1.0.0.0\")))) (\"[]\")))))) ((\"Var\" (\"name\" \"wild\"))) (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))) (\"(:)\" (\"(,,)\" (\"DataAlt\" ((\"DataCon\" ((\"name\" \"False\") (\"mod\" \"GHC.Types\") (\"pkg\" \"ghc-prim-0.4.0.0\"))))) (\"[]\") (\"App\" (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"*\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"fromInteger\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Lit\" (\"LitInteger\" (\"2\") (\"TyConApp\" ((\"TyCon\" ((\"name\" \"Integer\") (\"mod\" \"GHC.Integer.Type\") (\"pkg\" \"integer-gmp-1.0.0.0\")))) (\"[]\")))))) (\"App\" (\"Var\" ((\"Var\" (\"name\" \"power\")))) (\"App\" (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"-\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Var\" ((\"Var\" (\"name\" \"n\"))))) (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"fromInteger\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Lit\" (\"LitInteger\" (\"1\") (\"TyConApp\" ((\"TyCon\" ((\"name\" \"Integer\") (\"mod\" \"GHC.Integer.Type\") (\"pkg\" \"integer-gmp-1.0.0.0\")))) (\"[]\"))))))))) (\"(:)\" (\"(,,)\" (\"DataAlt\" ((\"DataCon\" ((\"name\" \"True\") (\"mod\" \"GHC.Types\") (\"pkg\" \"ghc-prim-0.4.0.0\"))))) (\"[]\") (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"fromInteger\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Lit\" (\"LitInteger\" (\"1\") (\"TyConApp\" ((\"TyCon\" ((\"name\" \"Integer\") (\"mod\" \"GHC.Integer.Type\") (\"pkg\" \"integer-gmp-1.0.0.0\")))) (\"[]\")))))) (\"[]\")))))) (\"[]\"))) (\"Var\" ((\"Var\" (\"name\" \"power\"))))))))))"
    },
    {
      "name": "powerTail",
      "package": "haskell-example",
      "module": "Eval",
      "ast": "(\"Lam\" ((\"Var\" (\"name\" \"a\"))) (\"Lam\" ((\"Var\" (\"name\" \"a\"))) (\"Lam\" ((\"Var\" (\"name\" \"$dEq\"))) (\"Lam\" ((\"Var\" (\"name\" \"$dNum\"))) (\"Lam\" ((\"Var\" (\"name\" \"$dNum\"))) (\"Lam\" ((\"Var\" (\"name\" \"n\"))) (\"App\" (\"App\" (\"App\" (\"App\" (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"helperPower\") (\"mod\" \"Eval\") (\"pkg\" \"haskell-example\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dEq\"))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Var\" ((\"Var\" (\"name\" \"n\"))))) (\"App\" (\"App\" (\"App\" (\"Var\" ((\"Var\" ((\"name\" \"fromInteger\") (\"mod\" \"GHC.Num\") (\"pkg\" \"base-4.8.1.0\"))))) (\"Type\" (\"TyVarTy\" ((\"Var\" (\"name\" \"a\")))))) (\"Var\" ((\"Var\" (\"name\" \"$dNum\"))))) (\"Lit\" (\"LitInteger\" (\"1\") (\"TyConApp\" ((\"TyCon\" ((\"name\" \"Integer\") (\"mod\" \"GHC.Integer.Type\") (\"pkg\" \"integer-gmp-1.0.0.0\")))) (\"[]\"))))))))))))"
    }
  ],
  "cmd": ":m\n:t let f = $(Test.QuickCheck.All.monomorphic ('Eval.fact)) in f\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.fact)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun5 (\"{\\\"arity\\\": 5, \\\"qname\\\": \\\"Eval.fact\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.fact)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun4 (\"{\\\"arity\\\": 4, \\\"qname\\\": \\\"Eval.fact\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.fact)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun3 (\"{\\\"arity\\\": 3, \\\"qname\\\": \\\"Eval.fact\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.fact)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun2 (\"{\\\"arity\\\": 2, \\\"qname\\\": \\\"Eval.fact\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.fact)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun1 (\"{\\\"arity\\\": 1, \\\"qname\\\": \\\"Eval.fact\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.fact)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun0 (\"{\\\"arity\\\": 0, \\\"qname\\\": \\\"Eval.fact\\\"}\") f))))\n:t let f = $(Test.QuickCheck.All.monomorphic ('Eval.fib)) in f\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.fib)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun5 (\"{\\\"arity\\\": 5, \\\"qname\\\": \\\"Eval.fib\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.fib)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun4 (\"{\\\"arity\\\": 4, \\\"qname\\\": \\\"Eval.fib\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.fib)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun3 (\"{\\\"arity\\\": 3, \\\"qname\\\": \\\"Eval.fib\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.fib)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun2 (\"{\\\"arity\\\": 2, \\\"qname\\\": \\\"Eval.fib\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.fib)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun1 (\"{\\\"arity\\\": 1, \\\"qname\\\": \\\"Eval.fib\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.fib)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun0 (\"{\\\"arity\\\": 0, \\\"qname\\\": \\\"Eval.fib\\\"}\") f))))\n:t let f = $(Test.QuickCheck.All.monomorphic ('Eval.helperFact)) in f\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.helperFact)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun5 (\"{\\\"arity\\\": 5, \\\"qname\\\": \\\"Eval.helperFact\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.helperFact)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun4 (\"{\\\"arity\\\": 4, \\\"qname\\\": \\\"Eval.helperFact\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.helperFact)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun3 (\"{\\\"arity\\\": 3, \\\"qname\\\": \\\"Eval.helperFact\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.helperFact)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun2 (\"{\\\"arity\\\": 2, \\\"qname\\\": \\\"Eval.helperFact\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.helperFact)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun1 (\"{\\\"arity\\\": 1, \\\"qname\\\": \\\"Eval.helperFact\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.helperFact)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun0 (\"{\\\"arity\\\": 0, \\\"qname\\\": \\\"Eval.helperFact\\\"}\") f))))\n:t let f = $(Test.QuickCheck.All.monomorphic ('Eval.factTail)) in f\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.factTail)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun5 (\"{\\\"arity\\\": 5, \\\"qname\\\": \\\"Eval.factTail\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.factTail)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun4 (\"{\\\"arity\\\": 4, \\\"qname\\\": \\\"Eval.factTail\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.factTail)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun3 (\"{\\\"arity\\\": 3, \\\"qname\\\": \\\"Eval.factTail\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.factTail)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun2 (\"{\\\"arity\\\": 2, \\\"qname\\\": \\\"Eval.factTail\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.factTail)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun1 (\"{\\\"arity\\\": 1, \\\"qname\\\": \\\"Eval.factTail\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.factTail)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun0 (\"{\\\"arity\\\": 0, \\\"qname\\\": \\\"Eval.factTail\\\"}\") f))))\n:t let f = $(Test.QuickCheck.All.monomorphic ('Eval.helperFib)) in f\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.helperFib)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun5 (\"{\\\"arity\\\": 5, \\\"qname\\\": \\\"Eval.helperFib\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.helperFib)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun4 (\"{\\\"arity\\\": 4, \\\"qname\\\": \\\"Eval.helperFib\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.helperFib)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun3 (\"{\\\"arity\\\": 3, \\\"qname\\\": \\\"Eval.helperFib\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.helperFib)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun2 (\"{\\\"arity\\\": 2, \\\"qname\\\": \\\"Eval.helperFib\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.helperFib)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun1 (\"{\\\"arity\\\": 1, \\\"qname\\\": \\\"Eval.helperFib\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.helperFib)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun0 (\"{\\\"arity\\\": 0, \\\"qname\\\": \\\"Eval.helperFib\\\"}\") f))))\n:t let f = $(Test.QuickCheck.All.monomorphic ('Eval.fibTail)) in f\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.fibTail)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun5 (\"{\\\"arity\\\": 5, \\\"qname\\\": \\\"Eval.fibTail\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.fibTail)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun4 (\"{\\\"arity\\\": 4, \\\"qname\\\": \\\"Eval.fibTail\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.fibTail)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun3 (\"{\\\"arity\\\": 3, \\\"qname\\\": \\\"Eval.fibTail\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.fibTail)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun2 (\"{\\\"arity\\\": 2, \\\"qname\\\": \\\"Eval.fibTail\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.fibTail)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun1 (\"{\\\"arity\\\": 1, \\\"qname\\\": \\\"Eval.fibTail\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.fibTail)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun0 (\"{\\\"arity\\\": 0, \\\"qname\\\": \\\"Eval.fibTail\\\"}\") f))))\n:t let f = $(Test.QuickCheck.All.monomorphic ('Eval.helperPower)) in f\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.helperPower)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun5 (\"{\\\"arity\\\": 5, \\\"qname\\\": \\\"Eval.helperPower\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.helperPower)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun4 (\"{\\\"arity\\\": 4, \\\"qname\\\": \\\"Eval.helperPower\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.helperPower)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun3 (\"{\\\"arity\\\": 3, \\\"qname\\\": \\\"Eval.helperPower\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.helperPower)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun2 (\"{\\\"arity\\\": 2, \\\"qname\\\": \\\"Eval.helperPower\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.helperPower)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun1 (\"{\\\"arity\\\": 1, \\\"qname\\\": \\\"Eval.helperPower\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.helperPower)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun0 (\"{\\\"arity\\\": 0, \\\"qname\\\": \\\"Eval.helperPower\\\"}\") f))))\n:t let f = $(Test.QuickCheck.All.monomorphic ('Eval.power)) in f\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.power)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun5 (\"{\\\"arity\\\": 5, \\\"qname\\\": \\\"Eval.power\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.power)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun4 (\"{\\\"arity\\\": 4, \\\"qname\\\": \\\"Eval.power\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.power)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun3 (\"{\\\"arity\\\": 3, \\\"qname\\\": \\\"Eval.power\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.power)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun2 (\"{\\\"arity\\\": 2, \\\"qname\\\": \\\"Eval.power\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.power)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun1 (\"{\\\"arity\\\": 1, \\\"qname\\\": \\\"Eval.power\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.power)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun0 (\"{\\\"arity\\\": 0, \\\"qname\\\": \\\"Eval.power\\\"}\") f))))\n:t let f = $(Test.QuickCheck.All.monomorphic ('Eval.powerTail)) in f\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.powerTail)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun5 (\"{\\\"arity\\\": 5, \\\"qname\\\": \\\"Eval.powerTail\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.powerTail)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun4 (\"{\\\"arity\\\": 4, \\\"qname\\\": \\\"Eval.powerTail\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.powerTail)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun3 (\"{\\\"arity\\\": 3, \\\"qname\\\": \\\"Eval.powerTail\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.powerTail)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun2 (\"{\\\"arity\\\": 2, \\\"qname\\\": \\\"Eval.powerTail\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.powerTail)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun1 (\"{\\\"arity\\\": 1, \\\"qname\\\": \\\"Eval.powerTail\\\"}\") f))))\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.powerTail)) in putStrLn (Test.QuickSpec.Term.name (head (Test.QuickSpec.Signature.symbols (Test.QuickSpec.fun0 (\"{\\\"arity\\\": 0, \\\"qname\\\": \\\"Eval.powerTail\\\"}\") f))))\n",
  "result": "\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.fact)) in f   :: Integer -> Integer\n{\"arity\": 1, \"qname\": \"Eval.fact\"}\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.fib)) in f   :: Integer -> Integer\n{\"arity\": 1, \"qname\": \"Eval.fib\"}\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.helperFact)) in f   :: Integer -> Integer -> Integer\n{\"arity\": 2, \"qname\": \"Eval.helperFact\"}\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.factTail)) in f   :: Integer -> Integer\n{\"arity\": 1, \"qname\": \"Eval.factTail\"}\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.helperFib)) in f   :: Integer -> Integer -> Integer -> Integer\n{\"arity\": 3, \"qname\": \"Eval.helperFib\"}\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.fibTail)) in f   :: Integer -> Integer\n{\"arity\": 1, \"qname\": \"Eval.fibTail\"}\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.helperPower)) in f   :: Integer -> Integer -> Integer\n{\"arity\": 2, \"qname\": \"Eval.helperPower\"}\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.power)) in f   :: Integer -> Integer\n{\"arity\": 1, \"qname\": \"Eval.power\"}\nlet f = $(Test.QuickCheck.All.monomorphic ('Eval.powerTail)) in f   :: Integer -> Integer\n{\"arity\": 1, \"qname\": \"Eval.powerTail\"}\n",
  "scopecmd": ":m\n:t (Eval.fact) :: (Integer -> Integer)\n:t (Eval.fib) :: (Integer -> Integer)\n:t (Eval.helperFact) :: (Integer -> Integer -> Integer)\n:t (Eval.factTail) :: (Integer -> Integer)\n:t (Eval.helperFib) :: (Integer -> Integer -> Integer -> Integer)\n:t (Eval.fibTail) :: (Integer -> Integer)\n:t (Eval.helperPower) :: (Integer -> Integer -> Integer)\n:t (Eval.power) :: (Integer -> Integer)\n:t (Eval.powerTail) :: (Integer -> Integer)\n",
  "scoperesult": "\n(Eval.fact) :: (Integer -> Integer) :: Integer -> Integer\n(Eval.fib) :: (Integer -> Integer) :: Integer -> Integer\n(Eval.helperFact) :: (Integer -> Integer -> Integer)   :: Integer -> Integer -> Integer\n(Eval.factTail) :: (Integer -> Integer) :: Integer -> Integer\n(Eval.helperFib) :: (Integer -> Integer -> Integer -> Integer)   :: Integer -> Integer -> Integer -> Integer\n(Eval.fibTail) :: (Integer -> Integer) :: Integer -> Integer\n(Eval.helperPower) :: (Integer -> Integer -> Integer)   :: Integer -> Integer -> Integer\n(Eval.power) :: (Integer -> Integer) :: Integer -> Integer\n(Eval.powerTail) :: (Integer -> Integer) :: Integer -> Integer\n"
}
