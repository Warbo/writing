\section{Finding Proof Strategies with ML4PG}\label{sec:compare}

In this section, we show how ML4PG discovers proof-patterns in the SSReflect library and also Proof Strategies \ref{ps:math} and \ref{ps:spec},
thereby giving a brief introduction to proof-pattern recognition with ML4PG; full details of implementation can be found in \cite{KHG13,HK12}.




\begin{example}[Benchmark 1]\label{ex:example1}
ML4PG will show a window with Lemmas~\ref{lem:lemma3},~\ref{lem:fundamental} and~\ref{lem:nilpotent2} when proving Lemma~\ref{lem:nilpotent}, if 
we ask it to consider five SSReflect libraries for clustering: \texttt{bigop} 
(devoted to generic indexed big operations like $\sum\limits_{i=0}^n f(i)$ or $\bigcap\limits_{i\in I} f(i)$), \texttt{matrix}, 
\texttt{binomial} (which defines combinatorial notions and include several results involving summations), a small library about summations
(which includes the proof of Lemma~\ref{lem:lemma3}) and the library about Persistent Homology formalised in~\cite{HCMS12}.
These libraries involve 758 lemmas for ML4PG to analyse.



\begin{example}[Benchmark 2]\label{ex:example2}
ML4PG will correctly suggest similar lemmas to Lemma~\ref{lem:factorial} in the libraries for multiplication, exponentiation and power.
%, if we use the 
%following settings:  
For this, we consider 15 libraries for clustering related to formalisations of arithmetic JVM programs.
These libraries involve 147 lemmas for ML4PG to analyse. Table~\ref{tab:jvm} shows the results for different choices of algorithms and parameters, and we highlight the exact match 
between the benchmark task and the ML4PG result. In case the user is unsure of the optimal machine-learning parameters, we recommend to use  a ``top-down approach''.
The highest granularity level does not produce any result. But, if we decrease 
the granularity level to 4, ML4PG spots some interesting similarities. If  this is not enough to discover Proof Strategy~\ref{ps:spec}; one can decrease the granularity level 
to $3$, for which ML4PG discovers exactly the four Benchmark-2 lemmas. 

\begin{table}
\centering
 \begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
   \hline
    & $g=1$& $g=2$& $g=3$& $g=4$ & $g=5$\\
      Algorithm: & ($n=14$) & ($n=16$) & ($n=18$) & ($n=21$) & ($n=24$)\\
   \hline
   Gaussian &10$^{a-d}$ & 10$^{a-d}$ & 0& 0& 0 \\
   \hline
   K-means (Matlab) &21$^{a-d}$  &\textbf{4}$^{a-d}$  &\textbf{4}$^{a-d}$ & 2$^{c,d}$& 0 \\
   \hline
   K-means (Weka) &30$^{a,b,d}$  &11$^{a,b,d}$  &3$^{a,b,d}$  &0 &0  \\
   \hline
   E.M. &21$^{a-d}$  &7$^{a-d}$  & 7$^{a-d}$ &0 &0  \\
   \hline
   FarthestFirst &28$^{a-d}$ & 25$^{a-d}$&  0 &0 &0  \\
   \hline
   
  \end{tabular} 
  \caption{\textbf{A series of clustering experiments discovering Proof Strategy~\ref{ps:spec}.} \emph{The table shows the sizes of clusters containing: 
  $a)$ Lemma about JVM multiplication program, $b)$ Lemma about JVM power program, $c)$ Lemma about JVM exponentiation program, and $d)$ Lemma about JVM factorial
  program. The size of the data set is 147 lemmas, in bold is the cluster that finds exactly the four benchmark examples.}}\label{tab:jvm}
\end{table}

\end{example}

It is very encouraging that, with all variations of the learning algorithms and parameters shown in Tables~\ref{tab:compare} and \ref{tab:jvm}, ML4PG is consistently 
grouping the correct lemmas into clusters, albeit with varied degree of precision. Judging by the experiments, Gaussian and K-means algorithms are the most reliable; 
they show very stable results; asking the user the very minimum effort of adjusting the granularity parameter to obtain the result of required precision. ML4PG is 
very fast and give instant outputs allowing the user to have quick search/evaluation.  

 
